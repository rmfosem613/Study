// 쿠키와 세션 이해하기
// 클라이언트에서 보내는 요청에는 한 가지 큰 단점이 있다.
// 바로 누가 요청을 보내는지 모른다는 것이다.
// 물론 요청을 보내는 IP 주소나 브라우저의 정보를 받아올 수는 있다.
// 하지만 여러 컴퓨터가 공통으로  IP 주소를 가지거나, 한 컴퓨터를 여러 사람이 사용할 수도 있다.

// 로그인을 구현해 이를 해결할 수 있다.
// 로그인을 구현하려면 쿠키와 세션에 대해 알고 있어야 한다.
// 로그인한 후에는 새로고침(새로운 요청)을 해도 로그아웃되지 않는다.
// 바로 클라이언트가 서버에게 여러분이 누구인지를 지속적으로 알려주고 있기 때문이다.

// 여러분이 누구인지 기억하기 위해서,
// 서버는 요청에 대한 응답을 할 때 쿠키라는 것을 같이 보낸다.
// 쿠키는 name=zerocho 같이 단순한 '키-값'의 쌍이다.
// 서버로부터 쿠키가 오면 웹 브라우저는 쿠키를 저장해두었다가 요청할 때마다 쿠키를 동봉해 보낸다.
// 서버는 요청에 들어 있는 쿠키를 읽어서 사용자가 누구인지 파악한다.

// 브라우저는 쿠키가 있다면 자동으로 동봉해서 보내주므로 따로 처리할 필요가 없다.
// 서버에서 브라우저로 쿠키를 보낼 때만 여러분이 코드를 작성하여 처리하면 된다.

// 즉, 서버를 미리 클라이언트에 요청자를 추정할 만한 정보를 쿠키로 만들어 보내고, 그 다음부터는 클라이언트로부터 쿠키를 받아 요청자를 파악한다.
// 개인정보 유출 방지를 위해 쿠키를 주기적으로 지우라는 말이 바로 이러한 이유 때문이다.

// 쿠키는 요청과 응답의 헤더(header)에 의해 저장된다.
// 요청과 응답은 각각 헤더와 본문(body)을 가진다.

// 서버에서 직접 쿠키를 만들어 요청자의 브라우저에 넣어보자.

const http = require('http');

// parseCookies 함수를 만들어 보았다.
// 쿠키는 문자열 형식으로 오므로 이를 {name:'serocho'}와 같이 객체로 바꾸는 함수이다.
const parseCookies = (cookie = '') => 
	cookie.split(';')
		.map(v => v.split('='))
		.map(([k, ...vs]) => [k, vs.join('=')])
		.reduce((acc, [k,v]) => {
			acc[k.trim()] = decodeURIComponent(v);
			return acc;
		}, {});

// createServer 메서드의 콜백에서는 가장 먼저 req 객체에 담겨 있는 쿠키를 분석한다.
// 쿠키는 req.headers.cookie에 들어 있다.
// req.headers는 요청의 헤더를 의미한다.
http.createServer((req, res) => {
	console.log(req.url, req.headers.cookie);
	
	// 응답의 헤더에 쿠키를 기록해야 하므로 res.writeHead 메서드를 사용했다.
	// 첫 번째 인자로 200이라는 상태 코드를 넣어두었다.
	// 200은 성공이라는 의미이다.
	// 두 번재 인자로는 헤더의 내용을 입력한다.
	// Set-Cookie는 브라우저한테 다음과 같은 값의 쿠키를 저장하라는 의미이다.
	// 실제로 응답을 받은 브라우저는 mycookie=test라는 쿠키를 저장한다.
	res.writeHead(200, {'Set-Cookie' : 'mycookie=test'});
	res.end('Hello Cookie');
}).listen(8083, () => {
	console.log('8083번 포트에서 서버 대기 중입니다!');
});


// 요청은 한 번만 보냈는데 두 개가 기록되었을 것이다.
// '/favicon.ico'는 요청한 적이 없는데 말이다.
// 첫 번째 요청에 ('/')에서는 쿠키에 대한 정보가 없다고 나오고,
// 두 번재 요청('/favicon.ico')에서는 {mycookie:'test'}가 기록되었다.
// 파비콘(favicon)이란 웹 사이트 택에 보이는 이미지를 뜻한다.
// 브라우저는 파비콘이 뭔지 HTML에서 유추할 수 없으면 서버에 파비콘 정보에 대한 요청을 보낸다.
// 이때 HTML에 파비콘에 대한 정보를 넣어두지 않았으므로 브라우저가 추가로 /favicon.ico를 요청한 것이다.


// Note!!
// 헤더와 본문
// 요청과 응답은 모두 헤더와 본문을 가지고 있다.
// 헤더는 요청 또는 응답에 대한 정보를 가지고 있는 곳이고,
// 본문은 서버와 클라이언트 간에 주고받을 실제 데이터를 담아두는 공간이다.
// 쿠키는 부가적인 정보이므로 헤더에 저장한다.