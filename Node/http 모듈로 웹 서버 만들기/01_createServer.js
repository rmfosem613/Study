// 서버는 클라이언트가 있기에 동작한다.
// 클라이언트에서 서버로 요청(request)을 보내고,
// 서버에서는 요청의 내용을 읽고 처리한 뒤 클라이언트에게 응답(response)을 보낸다.
// 따라서 서버에는 요청을 받는 부분과 응답을 보내는 부분이 있어야 한다.
// 요청과 응답은 이벤트 방식이라고 생각하면 된다.
// 클라이언트로부터 요청이 왔을 때 어떤 작업을 수행할지 이벤트 리스너를 미리 등록해두어야 한다.

// 이벤트 리스너를 가진 노드 서버 만들기

// http 서버가 있어야 웹 브라우저의 요청을 처리할 수 있으므로 http 모듈을 사용했다.
const http = require('http');

// http 모듈에는 createServer 메서드가 있다.
// 인자로 요청에 대한 콜백 함수를 넣을 수 있다.
// 요청이 들어올 때마다 매번 콜백 함수가 실행된다.

// createServer의 콜백 부분을 보면 req와 res 매개변수가 있다.
// 보통 req 객체는 요청에 관한 정보를,
// res 객체는 응답에 관한 정보를 담는다
http.createServer((req, res) => {
	//여기에 어떻게 응답할지 적어준다.
	
	res.write('<h1>Hello Node!</h1>');
	res.end('<p>Hello Server!</p>');

	// createServer 메서드 뒤에 listen 메서드를 붙이고 클라이언트에게 공개할 포트 번호와 포트 연결 완료 후 실행될 콜백 함수를 넣어준다.
	// 이제 이 파일을 실행하면 서버는 8080 포트에서 요청이 오기를 대기한다.
}).listen(8080, () => {
	console.log('8080번 포트에서 서버 대기 중입니다!');
});



