// 지금까지 배운 개념들만으로도 서버를 만들기에 충분하다.
// 하지만 서버를 운영할 때 코드에 에러가 발생하는 것은 치명적이므로 마지막으로 에러를 처리하는 방법에 대해 살펴보겠다.

// 노드에서는 예외 처리가 정말 중요하다.
// 예외란 보톨 처리하지 못한 에러를 가리킨다.
// 이러한 예외들은 실행 중인 노드 프로세스를 멈추게 만든다.

// 멀티 스레드 프로그램에서는 스레드 하나가 멈추면 그 일을 다른 스레드가 대신한다.
// 하지만 노드는 스레드가 하나뿐이므로 그 하나를 소중히 보호해야 한다.
// 하나뿐인 스레드가 에러로 인해 멈춘다는 것은 전체 서버가 멈춘다는 뜻과 같다.

// 에러 로그는 기록되되 작업은 계속 진행될 수 있도록 해야한다.
// 문법상의 에러는 없다고 가정하겠습니다.
// 실제 배포용 코드에 문법 에러가 있다는 것은 말이 되지 않는다.
// 좋은 에디터를 사용하거나 좋은 문법 검사 툴을 사용해서 오타나 문법 에러가 발생하지 않도록 한다.

// 다음 예제에서 프로세스가 멈추지 않도록 에러를 잡아보겠다.
// 에러가 발생할 것 같은 부분을 try catch 문으로 감싸주면 된다.


// setInteval을 사용한 것은 프로세스가 멈추는지 여부를 체크하기 위해서이다.
// 프로세스가 에러로 이니해 멈추면 setInterval도 멈출 것이다.
// setInterval 내부에 throw new Error()로 에러를 강제로 발생시켰다.
setInterval(() => {
	console.log('시작');
	try {
		throw new Error('서버를 고장내주마!');
	} catch (err) {
		console.error(err);
	}
}, 1000);

// 에러는 발생했지만 try catch로 잡을 수 있고 setInterval도 직접 멈추기 전까지 계속 실행된다.
// 이렇게 에러가 발생할 것 같은 부분을 미리 try catch로 감싸면 된다.












