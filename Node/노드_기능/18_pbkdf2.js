// crypto
// 다양한 방식의 암호화를 도와주는 모듈이다.
// 몇 가지 메서드는 익혀두면 실제 서비스에도 적용 할 수 있어 정말 유용하다.

// 1. 단방향 암호화
// 복호화할 수 없는 암호화 방식을 의미한다.
// 복호화는 암호화된 문자열을 원래 문자열로 되돌려 놓는 것을 의미한다.
// 즉, 단방향 암호화는 한 번 암호화하면 원래 문자열을 찾을 수 없다.
// 비밀번호는 보통 단방향 암호화 알고리즘을 사용해 암호화한다.
// 단방향 암호화 알고리즘은 주로 해시 기법을 사용한다.
// 해시 기법이란 어떠한 문자열을 고정된 길이의 다른 문자열로 바꿔버리는 방식이다.

// 해킹용 컴퓨터의 성능이 발달함에 따라 기존 해시 알고리즘들이 위협받고 있다.
// 현재는 주로 pbkd2나 bcrypt라는 알고리즘으로 비밀번호를 암호화하고 있다.
// 이중에 노드에서 지원하는 pbkd2를 지원한다.
// pbkd2는 간단히 말하면 기존 문자열에 salt라고 불리는 문자열을 붙인 후 해시 알고리즘을 반복해서 적용하는 것이다.


const crypto = require('crypto');

// 먼저 randomBytes() 메서드로 64바이트 길이의 문자열을 만들어준다.
// 이것이 salt가 된다.
// pbkdf2() 메서드에는 순서대로 비밀번호, salt,  반복 횟수, 출력 바이트, 해시 알고리즘을 인자로 넣어준다.
// 예시에는 10만번 반복해서 적용한다고 했다.
// 즉, sha512로 변환된 결과값을 다시 sha512로 변환하는 과정을 10만 번 반복하는 것이다.
// pbkdf2는 간단하지만 bcypt나 scrypt보다 취약하므로 나중에 더 나은 보안이 필요하면 scrypt 방식을 사용하면 된다.
crypto.randomBytes(64, (err, buf) => {
	const salt =buf.toString('base64');
	console.log('salt: ', salt);
	crypto.pbkdf2('비밀번호', salt, 100000, 64, 'sha512', (err, key) => {
		console.log('password: ', key.toString('base64'));
	})
})











